const fs = require('fs').promises;
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞
async function createBackup() {
  const timestamp = new Date().toISOString().replace(/:/g, '-');
  const backupDir = path.join(__dirname, 'backups');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±—ç–∫–∞–ø–æ–≤
    await fs.mkdir(backupDir, { recursive: true });
    
    // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    const files = ['users.json', 'usage.json', 'history.json', 'full_generations.json'];
    
    for (const file of files) {
      const sourcePath = path.join(__dirname, 'data', file);
      const destPath = path.join(backupDir, `${timestamp}_${file}`);
      
      try {
        await fs.copyFile(sourcePath, destPath);
        console.log(`‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: ${file}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${file}`);
      }
    }
    
    console.log('üì¶ –ë—ç–∫–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞:', error);
  }
}

createBackup();