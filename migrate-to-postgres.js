const fs = require('fs').promises;
const path = require('path');
const { initDatabase, users, history, fullGenerations } = require('./database');

// –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
const DATA_DIR = process.env.DATA_PATH || path.join(__dirname, 'data');

async function loadFileDB(filename) {
  try {
    const filepath = path.join(DATA_DIR, filename);
    const content = await fs.readFile(filepath, 'utf8');
    const parsed = JSON.parse(content);
    return new Map(parsed);
  } catch (error) {
    console.log(`‚ö†Ô∏è –§–∞–π–ª ${filename} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç`);
    return new Map();
  }
}

async function migrateData() {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL...');
  console.log(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö: ${DATA_DIR}`);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã
  await initDatabase();
  
  try {
    // 1. –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüìã –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const usersData = await loadFileDB('users.json');
    
    if (usersData.size > 0) {
      console.log(`  –ù–∞–π–¥–µ–Ω–æ ${usersData.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      
      for (const [apiKey, userData] of usersData.entries()) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
          const existing = await users.getByApiKey(apiKey);
          
          if (!existing) {
            await users.create({
              api_key: apiKey,
              username: userData.userEmail || userData.username || 'Unknown',
              server_id: userData.serverId || userData.server_id,
              channel_id: userData.channelId || userData.channel_id,
              salai_token: userData.salaiToken || userData.salai_token,
              monthly_limit: userData.monthlyLimit || userData.monthly_limit || 1000,
              is_admin: userData.role === 'admin' || userData.is_admin || false
            });
            
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
            if (userData.status === 'blocked' || userData.is_blocked) {
              await users.setBlocked(apiKey, true);
            }
            
            console.log(`  ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω: ${userData.userEmail || userData.username}`);
          } else {
            console.log(`  ‚è≠Ô∏è  –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${userData.userEmail || userData.username}`);
          }
        } catch (error) {
          console.error(`  ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, error.message);
        }
      }
    } else {
      console.log('  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // 2. –ú–∏–≥—Ä–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    console.log('\nüìä –ú–∏–≥—Ä–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è...');
    const usageData = await loadFileDB('usage.json');
    
    if (usageData.size > 0) {
      console.log(`  –ù–∞–π–¥–µ–Ω–æ ${usageData.size} –∑–∞–ø–∏—Å–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è`);
      
      for (const [apiKey, usage] of usageData.entries()) {
        try {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          const user = await users.getByApiKey(apiKey);
          if (user) {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            for (let i = 0; i < (usage.count || 0); i++) {
              await users.incrementUsage(apiKey);
            }
            console.log(`  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—á–µ—Ç—á–∏–∫ –¥–ª—è ${apiKey}: ${usage.count}`);
          }
        } catch (error) {
          console.error(`  ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞:`, error.message);
        }
      }
    } else {
      console.log('  –î–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // 3. –ú–∏–≥—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    console.log('\nüìú –ú–∏–≥—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π...');
    const historyData = await loadFileDB('history.json');
    
    if (historyData.size > 0) {
      let totalHistoryRecords = 0;
      
      for (const [apiKey, userHistory] of historyData.entries()) {
        if (Array.isArray(userHistory)) {
          totalHistoryRecords += userHistory.length;
          
          for (const record of userHistory) {
            try {
              await history.add(
                apiKey,
                record.prompt || '',
                JSON.stringify({
                  imageUrl: record.imageUrl || record.image_url,
                  taskId: record.taskId || record.task_id,
                  hash: record.hash,
                  timestamp: record.timestamp
                }),
                'completed'
              );
            } catch (error) {
              console.error(`  ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏:`, error.message);
            }
          }
        }
      }
      
      console.log(`  ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${totalHistoryRecords} –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏`);
    } else {
      console.log('  –ò—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    // 4. –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    console.log('\nüé® –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π...');
    const fullGenData = await loadFileDB('full_generations.json');
    
    if (fullGenData.size > 0) {
      console.log(`  –ù–∞–π–¥–µ–Ω–æ ${fullGenData.size} –ø–æ–ª–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π`);
      
      for (const [id, generation] of fullGenData.entries()) {
        try {
          await fullGenerations.create(id, generation);
          console.log(`  ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–ª–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: ${id}`);
        } catch (error) {
          console.error(`  ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:`, error.message);
        }
      }
    } else {
      console.log('  –ü–æ–ª–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // 5. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    console.log('\nüíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...');
    const backupDir = path.join(__dirname, 'data_backup_' + new Date().toISOString().split('T')[0]);
    
    try {
      await fs.mkdir(backupDir, { recursive: true });
      
      const files = ['users.json', 'usage.json', 'history.json', 'full_generations.json'];
      
      for (const file of files) {
        try {
          const sourcePath = path.join(DATA_DIR, file);
          const destPath = path.join(backupDir, file);
          await fs.copyFile(sourcePath, destPath);
          console.log(`  ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ${file}`);
        } catch (error) {
          console.log(`  ‚è≠Ô∏è  –§–∞–π–ª ${file} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
      }
      
      console.log(`\nüìÅ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤: ${backupDir}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
    }
    
    // 6. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalUsers = await users.count();
    const stats = await users.getStats();
    
    console.log('\n‚ú® –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`  –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}`);
    console.log(`  –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.activeusers}`);
    console.log(`  –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${stats.blockedusers}`);
    console.log(`  –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${stats.adminusers}`);
    
  } catch (error) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    process.exit(1);
  }
  
  process.exit(0);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ DATABASE_URL
if (!process.env.DATABASE_URL) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  console.error('   –î–æ–±–∞–≤—å—Ç–µ DATABASE_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway');
  process.exit(1);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrateData();