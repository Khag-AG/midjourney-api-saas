// server.js - –°—É–ø–µ—Ä –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≤–µ—Ä—Å–∏—è —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
const express = require('express');
const { Midjourney } = require('midjourney');
const fs = require('fs').promises;
const path = require('path');
require('dotenv').config();

const app = express();
const activeTasks = new Map(); // –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á

app.use(express.json());
app.use(express.static('public'));

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
const DATA_DIR = path.join(__dirname, 'data');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö
async function initDataDir() {
  try {
    await fs.mkdir(DATA_DIR, { recursive: true });
  } catch (error) {
    console.error('Error creating data directory:', error);
  }
}

// –§–∞–π–ª–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
class FileDB {
  constructor(filename) {
    this.filepath = path.join(DATA_DIR, filename);
    this.data = new Map();
  }

  async load() {
    try {
      const content = await fs.readFile(this.filepath, 'utf8');
      const parsed = JSON.parse(content);
      this.data = new Map(parsed);
    } catch (error) {
      this.data = new Map();
    }
  }

  async save() {
    try {
      const content = JSON.stringify([...this.data]);
      await fs.writeFile(this.filepath, content, 'utf8');
    } catch (error) {
      console.error('Error saving to file:', error);
    }
  }

  get(key) { return this.data.get(key); }
  set(key, value) { this.data.set(key, value); this.save(); return this; }
  has(key) { return this.data.has(key); }
  delete(key) { const result = this.data.delete(key); this.save(); return result; }
  get size() { return this.data.size; }
  entries() { return this.data.entries(); }
  values() { return Array.from(this.data.values()); }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
const users = new FileDB('users.json');
const userUsage = new FileDB('usage.json');
const generationHistory = new FileDB('history.json');
const userSessions = new Map();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
async function init() {
  await initDataDir();
  await users.load();
  await userUsage.load();
  await generationHistory.load();
  console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${users.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö`);
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ API –∫–ª—é—á–µ–π
function generateApiKey() {
  return 'mj_' + Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–µ–π
function validateApiKey(req, res, next) {
  const apiKey = req.headers['x-api-key'] || req.headers['authorization']?.replace('Bearer ', '');
  
  if (!apiKey) {
    return res.status(401).json({ error: 'API –∫–ª—é—á –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-API-Key' });
  }
  
  const user = users.get(apiKey);
  if (!user) {
    return res.status(401).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π API –∫–ª—é—á' });
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (user.status === 'blocked') {
    return res.status(403).json({ error: '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' });
  }
  
  // –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ª–∏–º–∏—Ç–æ–≤
  if (user.role === 'admin') {
    req.user = user;
    req.apiKey = apiKey;
    return next();
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const currentUsage = userUsage.get(apiKey) || { count: 0, resetDate: new Date() };
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ (—Ä–∞–∑ –≤ –º–µ—Å—è—Ü)
  const now = new Date();
  const resetDate = new Date(currentUsage.resetDate);
  if (now.getMonth() !== resetDate.getMonth() || now.getFullYear() !== resetDate.getFullYear()) {
    currentUsage.count = 0;
    currentUsage.resetDate = now;
    userUsage.set(apiKey, currentUsage);
  }
  
  if (currentUsage.count >= user.monthlyLimit) {
    return res.status(429).json({ 
      error: '–ü—Ä–µ–≤—ã—à–µ–Ω –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π',
      limit: user.monthlyLimit,
      used: currentUsage.count,
      resetDate: currentUsage.resetDate
    });
  }
  
  req.user = user;
  req.apiKey = apiKey;
  next();
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è Midjourney –∫–ª–∏–µ–Ω—Ç–∞
async function getMidjourneyClient(user) {
  try {
    const client = new Midjourney({
      ServerId: user.serverId,
      ChannelId: user.channelId,
      SalaiToken: user.salaiToken,
      Debug: false,
      Ws: true
    });
    
    await client.init();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ WebSocket
    if (client.ws) {
      client.ws.on('error', (error) => {
        console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error.message);
        // –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç –∏–∑ –∫–µ—à–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        const apiKey = Array.from(userSessions.entries())
          .find(([key, val]) => val === client)?.[0];
        if (apiKey) {
          userSessions.delete(apiKey);
        }
      });
      
      client.ws.on('close', () => {
        console.log('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
        // –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç –∏–∑ –∫–µ—à–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        const apiKey = Array.from(userSessions.entries())
          .find(([key, val]) => val === client)?.[0];
        if (apiKey) {
          userSessions.delete(apiKey);
        }
      });
    }
    
    return client;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Midjourney –∫–ª–∏–µ–Ω—Ç–∞:', error);
    throw error;
  }
}

// === API ENDPOINTS ===

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
app.get('/health', (req, res) => {
  const totalUsers = users.size;
  const activeUsers = Array.from(users.entries()).filter(([_, user]) => user.status === 'active').length;
  const blockedUsers = Array.from(users.entries()).filter(([_, user]) => user.status === 'blocked').length;
  const adminUsers = Array.from(users.entries()).filter(([_, user]) => user.role === 'admin').length;
  
  res.json({
    status: 'ok',
    stats: {
      totalUsers,
      activeUsers,
      blockedUsers,
      adminUsers,
      activeSessions: userSessions.size,
      activeTasks: activeTasks.size
    },
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'development'
  });
});

// ADMIN: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/admin/users', async (req, res) => {
  const { serverId, channelId, salaiToken, monthlyLimit = 100, userEmail, role = 'user' } = req.body;
  
  if (!serverId || !channelId || !salaiToken || !userEmail) {
    return res.status(400).json({
      error: '–¢—Ä–µ–±—É—é—Ç—Å—è: serverId, channelId, salaiToken, userEmail'
    });
  }
  
  const apiKey = generateApiKey();
  const user = {
    apiKey,
    serverId,
    channelId,
    salaiToken,
    monthlyLimit: role === 'admin' ? -1 : monthlyLimit,
    userEmail,
    role,
    createdAt: new Date().toISOString(),
    status: 'active'
  };
  
  users.set(apiKey, user);
  userUsage.set(apiKey, { count: 0, resetDate: new Date() });
  
  console.log(`üë§ –ù–æ–≤—ã–π ${role} —Å–æ–∑–¥–∞–Ω: ${userEmail}`);
  
  res.json({
    success: true,
    apiKey: apiKey,
    user: {
      email: userEmail,
      monthlyLimit: user.monthlyLimit,
      role: user.role,
      status: 'active'
    }
  });
});

// ADMIN: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/admin/users', (req, res) => {
  const userList = Array.from(users.entries()).map(([apiKey, user]) => {
    const usage = userUsage.get(apiKey) || { count: 0, resetDate: new Date() };
    return {
      apiKey: apiKey,
      email: user.userEmail,
      monthlyLimit: user.monthlyLimit,
      currentUsage: usage.count,
      resetDate: usage.resetDate,
      status: user.status,
      role: user.role || 'user',
      createdAt: user.createdAt,
      serverId: user.serverId,
      channelId: user.channelId,
      salaiToken: "***hidden***"
    };
  });
  
  res.json({ users: userList, total: users.size });
});

// ADMIN: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/admin/users/:apiKey', (req, res) => {
  const { apiKey } = req.params;
  const user = users.get(apiKey);
  
  if (!user) {
    return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  
  const usage = userUsage.get(apiKey) || { count: 0, resetDate: new Date() };
  const history = generationHistory.get(apiKey) || [];
  
  res.json({
    ...user,
    currentUsage: usage.count,
    resetDate: usage.resetDate,
    history: history.slice(-10)
  });
});

// ADMIN: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.put('/admin/users/:apiKey', (req, res) => {
  const { apiKey } = req.params;
  const updates = req.body;
  
  const user = users.get(apiKey);
  if (!user) {
    return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  
  const allowedFields = ['monthlyLimit', 'status', 'role', 'userEmail'];
  const updatedUser = { ...user };
  
  allowedFields.forEach(field => {
    if (updates[field] !== undefined) {
      updatedUser[field] = updates[field];
    }
  });
  
  if (updatedUser.role === 'admin') {
    updatedUser.monthlyLimit = -1;
  }
  
  users.set(apiKey, updatedUser);
  
  console.log(`‚úèÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: ${updatedUser.userEmail}`);
  
  res.json({ success: true, user: updatedUser });
});

// ADMIN: –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.delete('/admin/users/:apiKey', (req, res) => {
  const { apiKey } = req.params;
  
  if (!users.has(apiKey)) {
    return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  
  const user = users.get(apiKey);
  users.delete(apiKey);
  userUsage.delete(apiKey);
  generationHistory.delete(apiKey);
  userSessions.delete(apiKey);
  
  console.log(`üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω: ${user.userEmail}`);
  
  res.json({ success: true, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω' });
});

// ADMIN: –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/admin/users/:apiKey/reset', (req, res) => {
  const { apiKey } = req.params;
  
  if (!users.has(apiKey)) {
    return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  
  userUsage.set(apiKey, { count: 0, resetDate: new Date() });
  
  console.log(`üîÑ –õ–∏–º–∏—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è: ${users.get(apiKey).userEmail}`);
  
  res.json({ success: true, message: '–õ–∏–º–∏—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã' });
});

// ADMIN: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/admin/users/:apiKey/toggle-block', (req, res) => {
  const { apiKey } = req.params;
  const user = users.get(apiKey);
  
  if (!user) {
    return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  
  user.status = user.status === 'blocked' ? 'active' : 'blocked';
  users.set(apiKey, user);
  
  console.log(`${user.status === 'blocked' ? 'üîí' : 'üîì'} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.userEmail} ${user.status === 'blocked' ? '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}`);
  
  res.json({ success: true, status: user.status });
});

// ADMIN: –ò—Å—Ç–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
app.get('/admin/history', (req, res) => {
  const allHistory = [];
  
  generationHistory.entries().forEach(([apiKey, history]) => {
    const user = users.get(apiKey);
    history.forEach(item => {
      allHistory.push({
        ...item,
        userEmail: user?.userEmail || 'Deleted User',
        apiKey: apiKey.substring(0, 8) + '...'
      });
    });
  });
  
  allHistory.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
  
  res.json({ history: allHistory.slice(0, 100) });
});

// USER: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
app.post('/api/generate', validateApiKey, async (req, res) => {
  try {
    const { prompt } = req.body;
    const { user, apiKey } = req;
    
    if (!prompt) {
      return res.status(400).json({
        error: '–ü–∞—Ä–∞–º–µ—Ç—Ä prompt –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
        example: { prompt: 'beautiful sunset over mountains' }
      });
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π task_id
    const taskId = 'task_' + Date.now() + '_' + Math.random().toString(36).substring(7);
    
    console.log(`üé® –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è ${user.userEmail}: "${prompt}" (Task: ${taskId})`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    activeTasks.set(taskId, {
      status: 'processing',
      prompt: prompt,
      user: user.userEmail,
      apiKey: apiKey,
      startedAt: new Date().toISOString()
    });
    
    // –°—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º task_id
    res.json({
      success: true,
      task_id: taskId,
      status: 'processing',
      message: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞'
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
    (async () => {
      try {
        let client = userSessions.get(apiKey);
        if (!client) {
          client = await getMidjourneyClient(user);
          userSessions.set(apiKey, client);
        }
        
        const result = await client.Imagine(prompt, (uri, progress) => {
          console.log(`${user.userEmail} - –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}`);
          const task = activeTasks.get(taskId);
          if (task) {
            task.progress = progress;
            activeTasks.set(taskId, task);
          }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ completed
        activeTasks.set(taskId, {
          status: 'completed',
          prompt: prompt,
          image_url: result.uri,
          midjourney_id: result.id,
          user: user.userEmail,
          apiKey: apiKey,
          completedAt: new Date().toISOString()
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∏ –∏—Å—Ç–æ—Ä–∏—é
        let currentUsage = userUsage.get(apiKey) || { count: 0, resetDate: new Date() };
        if (user.role !== 'admin') {
          currentUsage.count += 1;
          userUsage.set(apiKey, currentUsage);
        }
        
        const historyItem = {
          prompt,
          imageUrl: result.uri,
          taskId: result.id,
          timestamp: new Date().toISOString()
        };
        
        const history = generationHistory.get(apiKey) || [];
        history.push(historyItem);
        generationHistory.set(apiKey, history);
        
        console.log(`‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${taskId} -> ${result.id}`);
        console.log(`üìé –¢–∏–ø –≤–ª–æ–∂–µ–Ω–∏—è: ${result.uri.includes('ephemeral') ? '–í–†–ï–ú–ï–ù–ù–û–ï' : '–ü–û–°–¢–û–Ø–ù–ù–û–ï'}`);
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è ${taskId}:`, error.message);
        activeTasks.set(taskId, {
          status: 'failed',
          error: error.message,
          prompt: prompt,
          user: user.userEmail,
          apiKey: apiKey,
          failedAt: new Date().toISOString()
        });
      }
    })();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error.message);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// USER: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
app.get('/api/task/:taskId', validateApiKey, (req, res) => {
  const { taskId } = req.params;
  const task = activeTasks.get(taskId);
  
  if (!task) {
    return res.status(404).json({
      error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
      task_id: taskId
    });
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∑–∞–¥–∞—á–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (task.apiKey !== req.apiKey && req.user.role !== 'admin') {
    return res.status(403).json({
      error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'
    });
  }
  
  const response = {
    task_id: taskId,
    status: task.status,
    prompt: task.prompt
  };
  
  if (task.status === 'completed') {
    response.image_url = task.image_url;
    response.midjourney_id = task.midjourney_id;
    response.task_id = task.midjourney_id;  // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å upscale
    
    // –£–¥–∞–ª—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
    setTimeout(() => {
      activeTasks.delete(taskId);
    }, 300000);
  } else if (task.status === 'failed') {
    response.error = task.error;
  } else if (task.progress !== undefined) {
    response.progress = task.progress;
  }
  
  res.json(response);
});

// ADMIN: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
app.get('/api/tasks', validateApiKey, (req, res) => {
  if (req.user.role !== 'admin') {
    return res.status(403).json({ error: '–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤' });
  }
  
  const tasks = Array.from(activeTasks.entries()).map(([id, task]) => ({
    task_id: id,
    status: task.status,
    user: task.user,
    prompt: task.prompt,
    progress: task.progress,
    startedAt: task.startedAt,
    completedAt: task.completedAt,
    error: task.error
  }));
  
  res.json({ tasks, total: tasks.length });
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è nonce –∫–∞–∫ –≤ Discord
function generateNonce() {
  const timestamp = Date.now() - 1420070400000;
  const workerId = Math.floor(Math.random() * 1024);
  const processId = Math.floor(Math.random() * 16384);
  const counter = Math.floor(Math.random() * 4096);
  return ((timestamp * 524288) + (workerId * 16384) + processId * 4096 + counter).toString();
}

// –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ upscale
async function waitForUpscaleResult(channelId, salaiToken, originalMessageId, index, maxAttempts = 30) {
  console.log(`‚è≥ –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç upscale –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${originalMessageId}, –∫–∞—Ä—Ç–∏–Ω–∫–∞ ${index}`);
  for (let attempt = 0; attempt < maxAttempts; attempt++) {
    await new Promise(resolve => setTimeout(resolve, 2000));
    try {
      const response = await fetch(`https://discord.com/api/v9/channels/${channelId}/messages?limit=50`, {
        headers: {
          'Authorization': salaiToken,
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      });
      if (!response.ok) continue;
      const messages = await response.json();
      for (const msg of messages) {
        if (msg.author.id === '936929561302675456' && msg.attachments && msg.attachments.length > 0 && msg.content) {
          if (msg.content.includes(`Image #${index}`) || (msg.reference && msg.reference.message_id === originalMessageId)) {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç upscale!');
            return { success: true, url: msg.attachments[0].url, proxy_url: msg.attachments[0].proxy_url, message_id: msg.id };
          }
        }
      }
    } catch (error) {
      console.error(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt + 1}: ${error.message}`);
    }
  }
  return { success: false, error: 'Timeout waiting for upscale result' };
}

// –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è upscale —á–µ—Ä–µ–∑ Discord API
async function customUpscale(messageId, index, hash, user) {
  console.log('üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é upscale');
  console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã upscale:', {
    messageId,
    index,
    hash,
    serverId: user.serverId,
    channelId: user.channelId,
    userEmail: user.userEmail
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  try {
    const checkUrl = `https://discord.com/api/v9/channels/${user.channelId}/messages/${messageId}`;
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: ${checkUrl}`);
    
    const checkResponse = await fetch(checkUrl, {
      headers: {
        'Authorization': user.salaiToken,
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
      }
    });
    
    if (!checkResponse.ok) {
      const errorText = await checkResponse.text();
      console.error(`‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ ${messageId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ ${user.channelId}`);
      console.error(`–û—Ç–≤–µ—Ç Discord: ${checkResponse.status} - ${errorText}`);
      throw new Error(`Message ${messageId} not found in channel ${user.channelId}`);
    }
    
    const message = await checkResponse.json();
    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ:', {
      id: message.id,
      author: message.author?.username,
      hasComponents: !!message.components
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è interaction
  }
  
  const customId = `MJ::JOB::upsample::${index}::${hash}`;
  const nonce = generateNonce();
  
  const payload = {
    type: 3,
    nonce,
    guild_id: user.serverId,
    channel_id: user.channelId,
    message_flags: 0,
    message_id: messageId,
    application_id: '936929561302675456',
    session_id: 'cb06f61453064c0983f2adae2a88c223',
    data: { 
      component_type: 2, 
      custom_id: customId 
    }
  };

  console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ upscale:', { 
    messageId, 
    index, 
    customId, 
    nonce,
    guildId: user.serverId,
    channelId: user.channelId
  });
  
  try {
    const response = await fetch('https://discord.com/api/v9/interactions', {
      method: 'POST',
      headers: {
        'Authorization': user.salaiToken,
        'Content-Type': 'application/json',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Accept': '*/*',
        'Accept-Language': 'en-US,en;q=0.9',
        'Origin': 'https://discord.com',
        'Referer': `https://discord.com/channels/${user.serverId}/${user.channelId}`,
        'Sec-Ch-Ua': '"Not_A Brand";v="8", "Chromium";v="120", "Google Chrome";v="120"',
        'Sec-Ch-Ua-Mobile': '?0',
        'Sec-Ch-Ua-Platform': '"Windows"',
        'Sec-Fetch-Dest': 'empty',
        'Sec-Fetch-Mode': 'cors',
        'Sec-Fetch-Site': 'same-origin',
        'X-Debug-Options': 'bugReporterEnabled',
        'X-Discord-Locale': 'en-US',
        'X-Discord-Timezone': 'Europe/Moscow'
      },
      body: JSON.stringify(payload)
    });

    const statusCode = response.status;
    const responseText = await response.text();
    console.log(`üì• Discord –æ—Ç–≤–µ—Ç: ${statusCode}`);
    if (responseText) console.log('Response body:', responseText);

    if (statusCode === 204) {
      console.log('‚úÖ –ö–æ–º–∞–Ω–¥–∞ upscale –ø—Ä–∏–Ω—è—Ç–∞ Discord!');
      const result = await waitForUpscaleResult(user.channelId, user.salaiToken, messageId, index);
      if (result.success) {
        return { 
          uri: result.url, 
          proxy_url: result.proxy_url, 
          success: true,
          message_id: result.message_id
        };
      }
      throw new Error(result.error || 'Failed to get upscale result');
    } else if (statusCode === 400) {
      const errorData = responseText ? JSON.parse(responseText) : {};
      throw new Error(`Bad Request: ${errorData.message || responseText}`);
    } else if (statusCode === 401) {
      throw new Error('Unauthorized: Check your Discord token');
    } else if (statusCode === 404) {
      throw new Error('Message not found or button expired. Try generating a new image.');
    } else {
      throw new Error(`Discord API error: ${statusCode} - ${responseText}`);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ customUpscale:', error);
    throw error;
  }
}

// USER: Upscale –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
app.post('/api/upscale', validateApiKey, async (req, res) => {
  try {
    const { task_id, index } = req.body;
    const idx = parseInt(index, 10);
    const { user, apiKey } = req;
    
    if (!task_id || Number.isNaN(idx)) {
      return res.status(400).json({
        error: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã task_id –∏ index –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã',
        example: { 
          task_id: "1379740446099771424", 
          index: 1,
          note: "index –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 4"
        }
      });
    }
    
    if (idx < 1 || idx > 4) {
      return res.status(400).json({
        error: '–ü–∞—Ä–∞–º–µ—Ç—Ä index –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 4',
        detail: '1 - –≤–µ—Ä—Ö–Ω—è—è –ª–µ–≤–∞—è, 2 - –≤–µ—Ä—Ö–Ω—è—è –ø—Ä–∞–≤–∞—è, 3 - –Ω–∏–∂–Ω—è—è –ª–µ–≤–∞—è, 4 - –Ω–∏–∂–Ω—è—è –ø—Ä–∞–≤–∞—è'
      });
    }
    
    console.log(`üîç Upscale –¥–ª—è ${user.userEmail}: –∑–∞–¥–∞—á–∞ ${task_id}, –∫–∞—Ä—Ç–∏–Ω–∫–∞ ${idx}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
    const activeTask = Array.from(activeTasks.values()).find(task => 
      task.midjourney_id === task_id && task.status === 'completed'
    );
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö, –∏—â–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏
    const history = generationHistory.get(apiKey) || [];
    const originalTask = activeTask || history.find(item => item.taskId === task_id);
    
    if (!originalTask || !(originalTask.imageUrl || originalTask.image_url)) {
      return res.status(404).json({
        error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.',
        details: '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π task_id –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'
      });
    }
    
    const imageUrl = originalTask.imageUrl || originalTask.image_url;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º hash –∏–∑ URL
    let hash = null;
    if (imageUrl) {
      const hashMatch = imageUrl.match(/([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})/);
      hash = hashMatch ? hashMatch[1] : null;
    }
    
    if (!hash) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å hash –∏–∑ URL:', imageUrl);
      return res.status(400).json({
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å hash –∏–∑ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        imageUrl: imageUrl
      });
    }
    
    console.log(`üìå –ò–∑–≤–ª–µ—á–µ–Ω hash: ${hash}`);
    console.log(`üîó URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${imageUrl}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ upscale
    console.log('‚è≥ –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ upscale...');
    await new Promise(resolve => setTimeout(resolve, 100));
    
    try {
      const result = await customUpscale(task_id, idx, hash, user);
      
      console.log(`‚úÖ Upscale –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è ${user.userEmail}`);
      
      const needBinary = req.headers['x-make-binary'] === 'true' || 
                        req.query.binary === 'true' ||
                        req.headers['accept'] === 'application/octet-stream';
      
      if (needBinary) {
        console.log(`üì• –ë–∏–Ω–∞—Ä–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
        
        try {
          const https = require('https');
          const resultUrl = new URL(result.uri);
          
          https.get(resultUrl, (imageResponse) => {
            if (imageResponse.statusCode !== 200) {
              throw new Error(`HTTP error! status: ${imageResponse.statusCode}`);
            }
            
            const chunks = [];
            
            imageResponse.on('data', (chunk) => {
              chunks.push(chunk);
            });
            
            imageResponse.on('end', () => {
              const imageBuffer = Buffer.concat(chunks);
              
              console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${imageBuffer.length} –±–∞–π—Ç`);
              
              res.set({
                'Content-Type': 'image/png',
                'Content-Length': imageBuffer.length,
                'Content-Disposition': `attachment; filename="midjourney_upscaled_${idx}_${Date.now()}.png"`,
                'X-Image-URL': result.uri,
                'X-Task-ID': task_id,
                'X-Selected-Index': idx.toString()
              });
              
              res.send(imageBuffer);
            });
            
            imageResponse.on('error', (error) => {
              console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error.message);
              res.json({
                success: true,
                image_url: result.uri,
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –±–∏–Ω–∞—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏'
              });
            });
          }).on('error', (error) => {
            console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ HTTPS –∑–∞–ø—Ä–æ—Å–∞:', error.message);
            res.json({
              success: true,
              image_url: result.uri,
              error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –±–∏–Ω–∞—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏'
            });
          });
          
          return;
          
        } catch (error) {
          console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ:', error.message);
          return res.json({
            success: true,
            image_url: result.uri,
            error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –±–∏–Ω–∞—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏'
          });
        }
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      const historyItem = {
        action: 'upscale',
        originalTaskId: task_id,
        selectedIndex: idx,
        imageUrl: result.uri,
        timestamp: new Date().toISOString()
      };
      
      history.push(historyItem);
      generationHistory.set(apiKey, history);
      
      res.json({
        success: true,
        image_url: result.uri,
        original_task_id: task_id,
        selected_index: idx,
        description: `–ö–∞—Ä—Ç–∏–Ω–∫–∞ ${idx} —É–≤–µ–ª–∏—á–µ–Ω–∞`,
        timestamp: new Date().toISOString()
      });
      
    } catch (upscaleError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ upscale:', upscaleError.message);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      return res.status(500).json({
        success: false,
        error: upscaleError.message,
        debug: {
          task_id: task_id,
          index: idx,
          hash: hash,
          imageUrl: imageUrl,
          user: user.userEmail
        },
        suggestion: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥'
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ upscale:', error);
    console.error('Stack trace:', error.stack);
    
    res.status(500).json({
      success: false,
      error: error.message,
      type: 'general_error'
    });
  }
});

// –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å (HTML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
app.get('/admin', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'admin.html'));
});

// –ö–æ—Ä–Ω–µ–≤–æ–π —Ä–æ—É—Ç
app.get('/', (req, res) => {
  res.json({
    name: 'Midjourney API Service',
    version: '2.1.0',
    endpoints: {
      health: '/health',
      admin: '/admin',
      api: {
        generate: 'POST /api/generate (async)',
        status: 'GET /api/task/:taskId',
        tasks: 'GET /api/tasks (admin only)',
        upscale: 'POST /api/upscale'
      }
    },
    changes: {
      '2.1.0': '–î–æ–±–∞–≤–ª–µ–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–∞—Ç—É—Å–∞'
    }
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;

init().then(() => {
  app.listen(PORT, () => {
    console.log(`üöÄ –°—É–ø–µ—Ä Midjourney API –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìä Health check: http://localhost:${PORT}/health`);
    console.log(`üë• Admin –ø–∞–Ω–µ–ª—å: http://localhost:${PORT}/admin`);
    console.log(`üé® API –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: POST http://localhost:${PORT}/api/generate`);
    console.log(`üìç API —Å—Ç–∞—Ç—É—Å–∞: GET http://localhost:${PORT}/api/task/:taskId`);
    console.log(`üîç API upscale: POST http://localhost:${PORT}/api/upscale`);
    console.log(`üåç –°—Ä–µ–¥–∞: ${process.env.NODE_ENV || 'development'}`);
  });
});