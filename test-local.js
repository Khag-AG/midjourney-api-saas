// test-local.js - –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ upscale
require('dotenv').config();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_URL = 'http://localhost:3000'; // –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
const API_KEY = 'mj_p448uim99tp8lxef93lja5'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API –∫–ª—é—á

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// 1. –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async function generateImage(prompt) {
  console.log('\nüé® –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
  console.log(`Prompt: ${prompt}`);
  
  try {
    const response = await fetch(`${API_URL}/api/generate`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-API-Key': API_KEY
      },
      body: JSON.stringify({ prompt })
    });
    
    const data = await response.json();
    console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
    
    if (!data.success || !data.task_id) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é');
    }
    
    return data.task_id;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error.message);
    throw error;
  }
}

// 2. –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
async function checkStatus(taskId) {
  console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ ${taskId}...`);
  
  try {
    const response = await fetch(`${API_URL}/api/task/${taskId}`, {
      method: 'GET',
      headers: {
        'X-API-Key': API_KEY
      }
    });
    
    const data = await response.json();
    console.log('üìä –°—Ç–∞—Ç—É—Å:', data.status);
    if (data.progress) console.log('üìà –ü—Ä–æ–≥—Ä–µ—Å—Å:', data.progress + '%');
    
    return data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error.message);
    throw error;
  }
}

// 3. –§—É–Ω–∫—Ü–∏—è upscale –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async function upscaleImage(taskId, index) {
  console.log(`\nüîç –ó–∞–ø—É—Å–∫–∞–µ–º upscale...`);
  console.log(`Task ID: ${taskId}`);
  console.log(`Index: ${index}`);
  
  try {
    const response = await fetch(`${API_URL}/api/upscale`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-API-Key': API_KEY
      },
      body: JSON.stringify({
        task_id: taskId,
        index: index
      })
    });
    
    console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    
    const contentType = response.headers.get('content-type');
    console.log('üìÑ Content-Type:', contentType);
    
    if (!response.ok) {
      const text = await response.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', text.substring(0, 200) + '...');
      throw new Error(`Server error: ${response.status}`);
    }
    
    const data = await response.json();
    console.log('üì• –û—Ç–≤–µ—Ç upscale:', data);
    
    return data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ upscale:', error.message);
    throw error;
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTest() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Midjourney API...\n');
  
  try {
    // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const prompt = 'Beautiful sunset over mountains, photorealistic, 8k';
    const taskId = await generateImage(prompt);
    
    // 2. –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    let status;
    let attempts = 0;
    const maxAttempts = 60; // 2 –º–∏–Ω—É—Ç—ã –º–∞–∫—Å–∏–º—É–º
    
    do {
      await delay(2000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
      status = await checkStatus(taskId);
      attempts++;
      
      if (attempts >= maxAttempts) {
        throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
      }
    } while (status.status === 'processing');
    
    if (status.status !== 'completed') {
      throw new Error(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: ${status.error}`);
    }
    
    console.log('\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log(`üñºÔ∏è  URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${status.image_url}`);
    console.log(`üÜî Midjourney ID: ${status.midjourney_id}`);
    
    // 3. –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ upscale
    console.log('\n‚è≥ –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ upscale...');
    await delay(5000);
    
    // 4. –î–µ–ª–∞–µ–º upscale –¥–ª—è –∫–∞–∂–¥–æ–π –∏–∑ 4 –∫–∞—Ä—Ç–∏–Ω–æ–∫
    console.log('\nüöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º upscale –¥–ª—è –≤—Å–µ—Ö 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n');
    
    for (let index = 1; index <= 4; index++) {
      console.log(`\n--- Upscale –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è #${index} ---`);
      
      try {
        const upscaleResult = await upscaleImage(status.midjourney_id, index);
        
        if (upscaleResult.success) {
          console.log(`‚úÖ Upscale #${index} —É—Å–ø–µ—à–µ–Ω!`);
          console.log(`üñºÔ∏è  URL: ${upscaleResult.image_url}`);
        } else {
          console.log(`‚ùå Upscale #${index} –Ω–µ—É–¥–∞—á–µ–Ω:`, upscaleResult.error);
        }
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ upscale #${index}:`, error.message);
      }
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É upscale
      if (index < 4) {
        console.log('\n‚è≥ –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã...');
        await delay(3000);
      }
    }
    
    console.log('\n\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    console.error('Stack trace:', error.stack);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
runTest();